<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://makafis.github.io/atom.xml" rel="self"/>
  <link href="http://makafis.github.io/"/>
  <updated>2015-07-15T08:24:29-04:00</updated>
  <id>http://makafis.github.io/</id>
  <author>
    <name><![CDATA[Vincent Alfieri]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Form Helpers]]></title>
    <link href="http://makafis.github.io/blog/2015/07/15/form-helpers/"/>
    <updated>2015-07-15T08:11:08-04:00</updated>
    <id>http://makafis.github.io/blog/2015/07/15/form-helpers</id>
    <content type="html"><![CDATA[<p>So I am a week into Rails and I have little grasp on exactly what I can do with these forms. If Rails generates the HTML in our forms then we should be able to generate anything that you can write in HTML. Form Helpers are great for that. There are many different helpers that you can use to gather user input.</p>

<p>Well lets start with the obvious. Form Helpers help you make forms!!
form_for and form_tag are the two ways you can generate forms through Rails.</p>

<p>Below is a list of some useful helpers that allow you to specify the types of data you expect from the user.</p>

<p>password_field – Simple, makes your text box have the little password dots.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">password_field</span> <span class="ss">:name</span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>email_field – Lets you accept an email address where if a user types in www.google.com you will get <a href="http://www.google.com">http://www.google.com</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:website</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>number_field – This is really cool. It creates a number field where you can set minimum, maximum, and ranges.  Extremely useful if you want users to select a QTY in their cart but not to exceed a certain amount.
range_field</p>

<p>collection_select – create a drop down list to choose from.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">collection_select</span> <span class="ss">:tag_ids</span><span class="p">,</span> <span class="no">Tag</span><span class="o">.</span><span class="n">all</span><span class="p">,</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">include_blank</span><span class="p">:</span> <span class="kp">true</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those are only a few that I think I will be using a lot in the future.</p>

<p>Guess what&hellip;. I can now write some kick ass HTML without even knowing HTML!!</p>

<p><img src="http://www.quickmeme.com/img/2a/2a4ac1cee5f34a3bc2c4e501ea90810fdb90e39cb12b46b67a0d545c1058d6c3.jpg" alt=""></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[config.ru and Setting Your 404 Page]]></title>
    <link href="http://makafis.github.io/blog/2015/06/30/config-dot-ru-and-setting-your-404-page/"/>
    <updated>2015-06-30T17:54:56-04:00</updated>
    <id>http://makafis.github.io/blog/2015/06/30/config-dot-ru-and-setting-your-404-page</id>
    <content type="html"><![CDATA[<h2>config.ru<sub>Not the Russian website</sub></h2>


<p>This file is required when using any type of Rack or Rails app.</p>

<p>Instead of writing a script to start an application you can use Shotgun or Rackup to automatically launch the stack you have inside of your config.ru file.  The content of this file will tell the Rack::Builder what middleware should be used and in what order.</p>

<p>Contents:
You should require your environment.
Next you should list your middleware stack. The lowest level of the stack uses the RUN command.
All other stack controllers you wish to use are listed with the USE command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">use</span> <span class="no">AnothernotsobigController</span>
</span><span class='line'><span class="n">use</span> <span class="no">AnotherController</span>
</span><span class='line'><span class="n">run</span> <span class="no">ApplicationController</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also change the port you run your application on during test.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">shotgun</span> <span class="o">--</span><span class="n">port</span><span class="o">=</span><span class="mi">6666</span>
</span></code></pre></td></tr></table></div></figure>




<h2>Creating your own custom 404 page in Sinatra!!!!!</h2>


<p>I always wanted a slick and clever 404 page.</p>

<p>Its pretty simple to implement.</p>

<p>Sooooo inside of your main ApplicationController
Just add the following code!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:show_exceptions</span><span class="p">,</span> <span class="kp">false</span>
</span><span class='line'><span class="n">not_found</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">status</span> <span class="mi">404</span>
</span><span class='line'>  <span class="n">erb</span> <span class="ss">:&#39;404&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A little explanation for line 1. Since we work in the Development environment the 404 page will never appear. To fix this you can either change environment in the environment.rb file or you can just change the :show_exceptions value to false.</p>

<p>Now you must create a &lsquo;404&rsquo; erb file. This is simple HTML so you should already know how to do that. If not. Googles!</p>

<p>And now whenever someone goes to a page that does not exist you will get an awesome 404 page.
<img src="http://httpstatusrappers.com/images/404.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog Post Ever and My Horrible Understanding of Regex]]></title>
    <link href="http://makafis.github.io/blog/2015/06/16/my-first-blog-post-ever-and-my-horrible-understanding-of-regex/"/>
    <updated>2015-06-16T18:17:24-04:00</updated>
    <id>http://makafis.github.io/blog/2015/06/16/my-first-blog-post-ever-and-my-horrible-understanding-of-regex</id>
    <content type="html"><![CDATA[<p>&ldquo;Im going to tell you how I feel before I get into regex.</p>

<p>So far I am loving my time here at Flatiron. It is an amazing experience that I cannot get enough of. Its tough waking up at 5am to get here every morning but I know it is worth it. It is crazy how much material we have covered in only two weeks. I am excited to see what the next few weeks have in store.</p>

<p>Now onto my horrible knowledge of REGEX!</p>

<p>I hate regular expressions with a passion. It is some cryptic language that I have no desire to learn. Sadly, I should learn it soooooo here I am writing my first blog post about a topic I know nothing about. Rather than regurgitate every guide I read I will just share some things that caught my eye.</p>

<p>What is a regular expression? It is a pattern to match in a string.  Sounds simple. Its NOT!</p>

<p>Here are some rules to follow.
Rule number 1.
We do not talk about Regular Expressions.</p>

<p>Rule number 2.
We do NOT talk about Regular Expressions.</p>

<p>:)</p>

<p>REGEX is enclosed in //</p>

<p>anything inside of the // will be searched for in a string. For example
/x/ will match all x that appear in the string.
/aeiou/ matches all vowels.
/[^aeiou]/ matches all letters that are not vowels.</p>

<p>The below statement takes a string of numbers and creates an array with each number having its own place in the array. You could have just called .split(&ldquo;&rdquo;) to get the same answer but regex looks cooler.</p>

<blockquote><p>numbers = &ldquo;1234567&rdquo;
 => &ldquo;1234567&rdquo;
numbers.scan(/\d/)
 => [&ldquo;1&rdquo;, &ldquo;2&rdquo;, &ldquo;3&rdquo;, &ldquo;4&rdquo;, &ldquo;5&rdquo;, &ldquo;6&rdquo;, &ldquo;7&rdquo;]</p></blockquote>

<p> /^\d+/ matches any positive numbers</p>

<p> /^-\d+/ matches any negative numbers</p>

<p>lets disect this.
^ means at the start of a line
- is a character indicating negative(subtract) character
\d means digits
+ match one or MORE occurances</p>

<p>/[\d]$/ will give you the last number of any digit. So if you type in 50493028 it will match 8.</p>

<p>/a[^aeiou]/ will match any &ldquo;a&rdquo; and any letter after it that is NOT a vowel.</p>

<p>a crazy one I found is:
/&lt;script[^>]<em>>[\w|\t|\r|\W]</em></script>/
This finds ALL lines within script inside of an HTML document.<br/>
Sounds good for scraping?</p>

<p>SO BIG DEAL. Why do we need to know all of this random crap when .gsub can do all of this!?!?!?!?! technically you dont but stringing together tons of .gsub can get confusing plus it is an eyesore. I&rsquo;ll tell you.
1. In my previous life when I learned how to work with Oracle databases and PL-SQL I was always told to store a specific type of data in the same format throughout that table. For example. If I store a phone number like this 555-555-5555 that means anyone else who has a phone number in this table must have it stored in that format. It makes it easier so that when we retrieve the data we can easily manipulate it without having to worry about its format.
2. Validating email addresses. This seems to be the most difficult thing ever for regex. Google knows all.</p>

<p>some awesome websites I have been using are:
<a href="http://regexlib.com/">http://regexlib.com/</a>
<a href="http://www.tutorialspoint.com/ruby/ruby_regular_expressions.htm">http://www.tutorialspoint.com/ruby/ruby_regular_expressions.htm</a>
<a href="http://rubylearning.com/satishtalim/ruby_regular_expressions.html">http://rubylearning.com/satishtalim/ruby_regular_expressions.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://makafis.github.io/blog/2015/06/02/my-first-post-on-octopress/"/>
    <updated>2015-06-02T09:53:57-04:00</updated>
    <id>http://makafis.github.io/blog/2015/06/02/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>&ldquo;Hello World&rdquo;</p>
]]></content>
  </entry>
  
</feed>
